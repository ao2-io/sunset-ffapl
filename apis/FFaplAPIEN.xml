<?xml version="1.0" encoding="UTF-8"?>
<FFapl>
	<type>
		<name>Integer</name>
		<description>Represents an Integer Value.</description>
		<regex>Integer</regex>
	</type>
	<type>
		<name>Z(p)</name>
		<description>Represents a Residue Class modulo {i}p{/i}.</description>
		<regex>Z</regex>
	</type>
	<type>
		<name>String</name>
		<description>Represents a String.</description>
		<regex>String</regex>
	</type>
	<type>
		<name>Z(p)[x]</name>
		<description>Represents a Polynomial ring modulo {i}p{/i}.</description>
		<regex>Z</regex>
	</type>
	<type>
		<name>GF(p, g)</name>
		<description>Represents a Galois Field with characteristic {i}p{/i} and irreducible polynomial {i}g{/i}.</description>
		<regex>GF</regex>
	</type>
	<type>
		<name>PseudoRandomGenerator(seed, max)</name>
		<description>Represents a pseudo random number generator with a {i}seed{/i}.{br}Generates random integers between 0 and {i}max{/i}.</description>
		<regex>PseudoRandomGenerator</regex>
	</type>
	<type>
		<name>RandomGenerator(max)</name>
		<description>Represents a random number generator.{br}Generates random integers between 0 and {i}max{/i}.</description>
		<regex>RandomGenerator</regex>
	</type>	
	<type>
		<name>RandomGenerator(min : max)</name>
		<description>Represents a random number generator.{br}Generates random integers between {i}min{/i} and {i}max{/i}.</description>
		<regex>RandomGenerator</regex>
	</type>

<function>
	<name>max</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns the maximum of {i}a{/i} and {i}b{/i}.</description>
	<regex>max</regex>
	<return>Integer</return>
</function>

<function>
	<name>min</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns the minimum of {i}a{/i} and {i}b{/i}.</description>
	<regex>min</regex>
	<return>Integer</return>
</function>

<function>
	<name>getNextPrime</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns next Prime after {i}val{/i}.</description>
	<regex>getNextPrime</regex>
	<return>Integer</return>
</function>

<function>
	<name>irreduciblePolynomial</name>
		<parameters>
			<parameter>
			    <name>n</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>p</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>generates an irreducible Polynomial with degree {i}n{/i} modulo {i}p{/i}</description>
	<regex>irreduciblePolynomial</regex>
	<return>Polynomial</return>
</function>

<function>
	<name>randomPolynomial</name>
		<parameters>
			<parameter>
			    <name>n</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>p</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>generates a random Polynomial with degree {i}n{/i} modulo {i}p{/i}</description>
	<regex>randomPolynomial</regex>
	<return>Polynomial</return>
</function>

<function>
	<name>factorInteger</name>
		<parameters>
			<parameter>
			    <name>n</name>
				<type>Integer</type>
			</parameter>
		</parameters>
	<description>factorize an Integer {i}n{/i}. Switches between Pollard's rho, Pollard's p-1 and simple Iteration.</description>
	<regex>factorInteger</regex>
	<return>Integer[][]</return>
</function>

<function>
	<name>factorSquareFree</name>
		<parameters>
			<parameter>
			    <name>f</name>
				<type>GF()</type>
			</parameter>
		</parameters>
	<description>returns square-free factorization of{i}f{/i} in {i}GF{/i}. </description>
	<regex>factorSquareFree</regex>
	<return>Polynomial[][]</return>
</function>

<function>
	<name>factor</name>
		<parameters>
			<parameter>
			    <name>f</name>
				<type>GF()</type>
			</parameter>
		</parameters>
	<description>returns factorization of {i}f{/i} in {i}GF{/i}. </description>
	<regex>factor</regex>
	<return>Polynomial[][]</return>
</function>

<function>
	<name>evaluatePolynomial</name>
		<parameters>
			<parameter>
			    <name>f</name>
				<type>GF()</type>
				<type>Polynomial</type>
				<type>Z(p)[x]</type>
			</parameter>
			<parameter>
			    <name>val</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>Calculates the value of {i}f{/i}, for {i}x{/i} := {i}val{/i}. </description>
	<regex>evaluatePolynomial</regex>
	<return>Integer</return>
</function>


<function>
	<name>gcd</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns the great common divisor of {i}a{/i} and {i}b{/i}</description>
	<regex>gcd</regex>
	<return>Integer</return>
</function>

<function>
	<name>lcm</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns the least common multiple of {i}a{/i} and {i}b{/i}</description>
	<regex>lcm</regex>
	<return>Integer</return>
</function>

<function>
	<name>gcd</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Z()[x]</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Z()[x]</type>
			</parameter>
		</parameters>
	<description>returns the great common divisor of {i}a{/i} and {i}b{/i} in {i}Z()[x]{/i}.</description>
	<regex>gcd</regex>
	<return>Integer</return>
</function>

<function>
	<name>eea</name>
		<parameters>
			<parameter>
			    <name>a</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>b</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description> returns an array with {{i}d{/i},{i}s{/i},{i}t{/i}} were  {i}s{/i}*{i}a{/i} + {i}t{/i}*{i}b{/i} = {i}gcd{/i}({i}a{/i},{i}b{/i}) = {i}d{/i}</description>
	<regex>eea</regex>
	<return>Integer[]</return>
</function>

<function>
	<name>eea</name>
		<parameters>
			<parameter>
			    <name>g</name>
				<type>Z()[x]</type>
			</parameter>
			<parameter>
			    <name>h</name>
				<type>Z()[x]</type>
			</parameter>
		</parameters>
	<description>returns an array with {{i}d{/i},{i}s{/i},{i}t{/i}} were  {i}s{/i}*{i}g{/i} + {i}t{/i}*{i}h{/i} = {i}gcd{/i}({i}g{/i},{i}h{/i}) = {i}d{/i} in {i}Z()[x]{/i}.</description>
	<regex>eea</regex>
	<return>Z()[x][]</return>
</function>

<function>
	<name>isPrime</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>Integer</type>
			</parameter>
		</parameters>
	<description>returns {i}true{/i} if {i}val{/i} is prime, {i}false{/i} otherwise.</description>
	<regex>isPrime</regex>
	<return>Boolean</return>
</function>

<function>
	<name>isIrreducible</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>Z()[x]</type>
			</parameter>
		</parameters>
	<description>returns {b}true{/b} if {i}val{/i} is irreducible in {i}Z()[x]{/i}, {b}false{/b} otherwise.</description>
	<regex>isIrreducible</regex>
	<return>Boolean</return>
</function>

<function>
	<name>isIrreducible</name>
		<parameters>
			<parameter>
			    <name>ply</name>
				<type>Polynomial</type>
			</parameter>
			<parameter>
			    <name>p</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns {b}true{/b} if {i}ply{/i} is irreducible in {i}Z(p)[x]{/i}, {b}false{/b} otherwise.</description>
	<regex>isIrreducible</regex>
	<return>Boolean</return>
</function>

<function>
	<name>isPrimitive</name>
		<parameters>
			<parameter>
			    <name>ply</name>
				<type>Polynomial</type>
			</parameter>
			<parameter>
			    <name>p</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
			<parameter>
			    <name>primeFactors</name>
				<type>Prime[]</type>
			</parameter>
		</parameters>
	<description>returns {b}true{/b} if {i}ply{/i} is irreducible in {i}Z(p)[x]{/i}, {b}false{/b} otherwise.
	{br}{i}primeFactors{/i} := prime factors of {i}p^(degree of ply) - 1{/i}.</description>
	<regex>isPrimitive</regex>
	<return>Boolean</return>
</function>

<function>
	<name>isPrimitive</name>
		<parameters>
			<parameter>
			    <name>ply</name>
				<type>Polynomial</type>
			</parameter>
			<parameter>
			    <name>p</name>
				<type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns {b}true{/b} if {i}ply{/i} is irreducible in {i}Z(p)[x]{/i}, {b}false{/b} otherwise.
	{br}{i}p^(degree of ply) - 1{/i} will be factorized (can take time).</description>
	<regex>isPrimitive</regex>
	<return>Boolean</return>
</function>

<function>
	<name>isPrimitive</name>
		<parameters>
			<parameter>
			    <name>ply</name>
				<type>Z(p)[x]</type>
			</parameter>
		</parameters>
	<description>returns {b}true{/b} if {i}ply{/i} is irreducible in {i}Z(p)[x]{/i}, {b}false{/b} otherwise.
	{br}{i}p^(degree of ply) - 1{/i} will be factorized (can take time).</description>
	<regex>isPrimitive</regex>
	<return>Boolean</return>
</function>

<function>
	<name>getIrreduciblePolynomial</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>GF()</type>
			</parameter>
		</parameters>
	<description>returns the irreducible polynomial of {i}GF(){/i} from {i}val{/i}.</description>
	<regex>getIrreduciblePolynomial</regex>
	<return>Polynomial</return>
</function>

<function>
	<name>getCharacteristic</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>GF()</type>
				<type>Z()</type>
				<type>Z()[x]</type>
			</parameter>
		</parameters>
	<description>returns the characteristic of [{i}GF(){/i} | {i}Z(){/i} | {i}Z()[x]{/i}] from {i}val{/i}.</description>
	<regex>getCharacteristic</regex>
	<return>Integer</return>
</function>

<function>
	<name>leadingCoefficient</name>
		<parameters>
			<parameter>
			    <name>ply</name>
			    <type>Polynomial</type>
				<type>Z()[x]</type>
				<type>GF()</type>
			</parameter>
		</parameters>
	<description>returns the leading coefficient of {i}ply{/i}.</description>
	<regex>leadingCoefficient</regex>
	<return>Integer</return>
</function>

<function>
	<name>convertToInteger</name>
		<parameters>
			<parameter>
			    <name>val</name>
				<type>Z(p)</type>
			</parameter>
		</parameters>
	<description>coverts value {i}val{/i} in {i}Z(p){/i} to {i}Integer{/i}.</description>
	<regex>convertToInteger</regex>
	<return>Integer</return>
</function>

<function>
	<name>degree</name>
		<parameters>
			<parameter>
			    <name>ply</name>
			    <type>Polynomial</type>
				<type>Z()[x]</type>
				<type>GF()</type>
			</parameter>
		</parameters>
	<description>returns the degree of {i}ply{/i}.</description>
	<regex>degree</regex>
	<return>Integer</return>
</function>

<function>
	<name>coefficientAt</name>
		<parameters>
			<parameter>
			    <name>ply</name>
			    <type>Polynomial</type>
				<type>Z()[x]</type>
				<type>GF()</type>
			</parameter>
			<parameter>
			    <name>e</name>
			    <type>Integer</type>
				<type>Prime</type>
			</parameter>
		</parameters>
	<description>returns the coefficient of from {i}x^e{/i} in {i}ply{/i}.</description>
	<regex>coefficientAt</regex>
	<return>Integer</return>
</function>

<function>
	<name>TLPairing</name>
		<parameters>
			<parameter>
			    <name>P</name>
			    <type>EC</type>
			</parameter>
			<parameter>
			    <name>Q</name>
			    <type>EC</type>
			</parameter>
		</parameters>
	<description>computes the Tate-Lichtenbaum Pairing on the points {P} and {Q}.</description>
	<regex>tlPairing</regex>
	<return>GF</return>
</function>


<procedure>
	<name>print</name>
	<parameters>
			<parameter>
			    <name>val</name>
				<type>Integer</type>
				<type>String</type>
				<type>Prime</type>
				<type>Random</type>
				<type>Z()</type>
				<type>Z()[x]</type>
				<type>GF</type>
				<type>PseudoRandomGenerator</type>
				<type>RandomGenerator</type>
			</parameter>
	</parameters>
	<regex>print</regex>
	<description>prints out {i}val{/i}.</description>
</procedure>
<procedure>
	<name>println</name>
	<parameters>
			<parameter>
			    <name>val</name>
				<type>Integer</type>
				<type>String</type>
				<type>Prime</type>
				<type>Random</type>
				<type>Z()</type>
				<type>Z()[x]</type>
				<type>GF</type>
				<type>PseudoRandomGenerator</type>
				<type>RandomGenerator</type>
				<type>Array</type>
			</parameter>
	</parameters>
	<regex>println</regex>
	<description>prints out {i}val{/i} and new line.</description>
</procedure>

<samples>
	<procedure>
		<name>proc</name>
		<parameters>
				<parameter>
				    <name>val</name>
					<type>Integer</type>
				</parameter>
		</parameters>
		<code>
	procedure proc(val : Integer) {
	//insert your code here
	}</code>
		<regex>proc</regex>
		<description>sample procedure with one parameter {i}val{/i}.</description>
	</procedure>
	
	<function>
		<name>func</name>
		<parameters>
				<parameter>
				    <name>val</name>
					<type>Integer</type>
				</parameter>
		</parameters>
		<regex>func</regex>
		<code>
	function func(val : Integer) : Integer{
		//insert your code here
		
		return //insert here your return value
	}</code>
		<return>Integer</return>
		<description>sample function with one parameter {i}val{/i} and return type.</description>
	</function>
	<function>
		<name>faculty</name>
		<parameters>
				<parameter>
				    <name>val</name>
					<type>Integer</type>
				</parameter>
		</parameters>
		<regex>faculty</regex>
		<code>
	function faculty(val : Integer) : Integer{
	    f : Integer;
	    f := 1;
	    for i = 1 to val{
	    	f:= f * i;
	    }
		return f;
	}</code>
		<return>Integer</return>
		<description>returns the faculty of {i}val{/i}.</description>
	</function>
	<function>
		<name>facultyRecursion</name>
		<parameters>
				<parameter>
				    <name>val</name>
					<type>Integer</type>
				</parameter>
		</parameters>
		<regex>faculty</regex>
		<code>
	function facultyRecursion(val : Integer) : Integer{
	    f : Integer;
	    if(val == 1){
	    	f := 1;
		}else{
		   	f := val * facultyRecursion(val - 1);
		}
		return f;
	}</code>
		<return>Integer</return>
		<description>returns the faculty of {i}val{/i}.</description>
	</function>
	
	<function>
		<name>isIrreducibleQ</name>
		<parameters>
				<parameter>
				    <name>f</name>
					<type>Polynomial</type>
				</parameter>
				<parameter>
				    <name>p</name>
					<type>Prime</type>
				</parameter>
		</parameters>
		<regex>isIrreducibleQ</regex>
		<code>
	/** 
	* Testing whether a polynomial is irreducible
	* Algorithmus according Handbook of Applied Cryptography 
	* Algorithmus 4.69
	*/
	function isIrreducibleQ(f : Polynomial; p : Prime) : Boolean{
		result : Boolean;
		u, d, ff : Z(p)[x];
    		lc: Z(p);
		m: Integer;
		ff := f;
	
		if(leadingCoefficient(ff) > 1){
			//not monic
    	    		lc := leadingCoefficient(ff);
    	    		ff := ff * lc^-1;
		}
		
		result := true;
    		m := degree(ff);
		u := [x]; // u(x) := x
	   	if(m != 1){
			for i = 1 to m/2 { // for i to m/2
				u := u^p MOD ff;  // u(x) := u(x)^p mod f(x)
				d := gcd(ff, u - [x]); //d(x) := gcd(f(x), u(x) - x)
           			if(degree(d) > 0){ // if d(x) != 1 not irreducible
					result := false; 
					break;
				}
			}
		}
		return result;
	}
	</code>
		<return>Boolean</return>
		<description>Testing whether a polynomial {i}f{/i} is irreducible in {i}Z(p)[x]{/i}.</description>
	</function>
	
	<function>
		<name>isPrimitiveQ</name>
		<parameters>
				<parameter>
				    <name>f</name>
					<type>Polynomial</type>
				</parameter>
				<parameter>
				    <name>p</name>
					<type>Prime</type>
				</parameter>
		</parameters>
		<regex>isPrimitiveQ</regex>
		<code>
	/** 
	* Testing whether an irreducible polynomial is primitiv
	* Algorithmus according Handbook of Applied Cryptography 
	* Algorithmus 4.77
	*/
	function isPrimitiveQ(f : Polynomial; p : Prime) : Boolean{
		result : Boolean;
		u, d, ff, lx : Z(p)[x];
    		lc: Z(p);
		m, pm, val: Integer;
    		primeFactors : Integer[][];
		ff := f;
	
		if(isIrreducibleQ(f, p)){
			m:= degree(f);
			pm := p^m - 1;
			
			if(leadingCoefficient(ff) > 1){
				//not monic
        			lc := leadingCoefficient(ff);
        			ff := ff * lc^-1;
			}
			
			primeFactors := factorInteger(pm); //prime factors from p^m - 1
            		result := true;
			for i = 0 to #primeFactors - 1{
				val := primeFactors[i][0]; 
				lx := [x]^(pm/val) MOD ff; //l(x) := x^((p^m - 1) / r_i) mod f(x)
				if(lx == 1){ // not primitiv
					result := false;
					break;
				}
			}
		}else{ // not irreducible therefore not primitiv
			result := false;
		}
  		return result;
	}
	</code>
		<return>Boolean</return>
		<description>Testing whether an irreducible polynomial {i}f{/i} is primitiv in {i}Z(p)[x]{/i},{br}
		i.e. {i}x{/i} is a generator of the multiplicative group of {i}GF(p, f){/i}.</description>
	</function>
	
</samples>

</FFapl>