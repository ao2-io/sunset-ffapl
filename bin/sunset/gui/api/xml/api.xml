<?xml version="1.0" encoding="UTF-8"?>
<ff:apiSpecification xmlns:ff="ffapl/api"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="ffapl/api ../jaxb/api.xsd ">
	<ff:typeList>
		<ff:type>
			<ff:name>Integer</ff:name>
			<ff:description>DESC_TYPE_INTEGER</ff:description>
			<ff:regex>Integer</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>Polynomial</ff:name>
			<ff:description>DESC_TYPE_POLYNOMIAL</ff:description>
			<ff:regex>Polynomial</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>Z(p)</ff:name>
			<ff:description>DESC_TYPE_RESIDUE_CLASS</ff:description>
			<ff:regex>Z</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>String</ff:name>
			<ff:description>DESC_TYPE_STRING</ff:description>
			<ff:regex>String</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>Z(p)[x]</ff:name>
			<ff:description>DESC_TYPE_POLYNOMIAL_RESIDUE_CLASS</ff:description>
			<ff:regex>Z</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>GF(p, g)</ff:name>
			<ff:description>DESC_TYPE_GF</ff:description>
			<ff:regex>GF</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>PseudoRandomGenerator(seed, max)</ff:name>
			<ff:description>DESC_TYPE_PSEUDORANDOM_GENERATOR</ff:description>
			<ff:regex>PseudoRandomGenerator</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>RandomGenerator(max)</ff:name>
			<ff:description>DESC_TYPE_RANDOM_GENERATOR_MAX</ff:description>
			<ff:regex>RandomGenerator</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>RandomGenerator(min : max)</ff:name>
			<ff:description>DESC_TYPE_RANDOM_GENERATOR</ff:description>
			<ff:regex>RandomGenerator</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>Record</ff:name>
			<ff:description>DESC_TYPE_RECORD</ff:description>
			<ff:regex>Record|EndRecord</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>EC</ff:name>
			<ff:description>DESC_TYPE_EC</ff:description>
			<ff:regex>EC</ff:regex>
		</ff:type>
		<ff:type>
			<ff:name>SameAs</ff:name>
			<ff:description>DESC_TYPE_SAMEAS</ff:description>
			<ff:regex>SameAs</ff:regex>
		</ff:type>
	</ff:typeList>
	<ff:procedureList>
		<ff:procedure>
			<ff:name>print</ff:name>
			<ff:description>DESC_PROC_PRINT</ff:description>
			<ff:regex>print</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>val</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>String</ff:type>
					<ff:type>Prime</ff:type>
					<ff:type>Z()</ff:type>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF</ff:type>
					<ff:type>PseudoRandomGenerator</ff:type>
					<ff:type>RandomGenerator</ff:type>
				</ff:parameter>
			</ff:parameterList>
		</ff:procedure>
		<ff:procedure>
			<ff:name>println</ff:name>
			<ff:description>DESC_PROC_PRINTLN</ff:description>
			<ff:regex>println</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>val</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>String</ff:type>
					<ff:type>Prime</ff:type>
					<ff:type>Z()</ff:type>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF</ff:type>
					<ff:type>PseudoRandomGenerator</ff:type>
					<ff:type>RandomGenerator</ff:type>
				</ff:parameter>
			</ff:parameterList>
			
		</ff:procedure>
	</ff:procedureList>
	<ff:functionList>
		<ff:function>
			<ff:name>max</ff:name>
			<ff:description>DESC_FUNC_MAX</ff:description>
			<ff:regex>max</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>b</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>min</ff:name>
			<ff:description>DESC_FUNC_MIN</ff:description>
			<ff:regex>min</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>b</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>getNextPrime</ff:name>
			<ff:description>DESC_FUNC_GETNEXTPRIME</ff:description>
			<ff:regex>getNextPrime</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Prime</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>irreduciblePolynomial</ff:name>
			<ff:description>DESC_FUNC_IRREDUCIBLEPOLYNOMIAL</ff:description>
			<ff:regex>irreduciblePolynomial</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>n</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>p</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>randomPolynomial</ff:name>
			<ff:description>DESC_FUNC_RANDOMPOLYNOMIAL</ff:description>
			<ff:regex>randomPolynomial</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>n</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>p</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>factorInteger</ff:name>
			<ff:description>DESC_FUNC_FACTORINTEGER</ff:description>
			<ff:regex>factorInteger</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>n</ff:name>
					<ff:type>Integer</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer[][]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>factorSquareFree</ff:name>
			<ff:description>DESC_FUNC_FACTORSQUAREFREE</ff:description>
			<ff:regex>factorSquareFree</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>GF()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial[][]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>factor</ff:name>
			<ff:description>DESC_FUNC_FACTOR</ff:description>
			<ff:regex>factor</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>GF()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial[][]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>evaluatePolynomial</ff:name>
			<ff:description>DESC_FUNC_EVALUATEPOLYNOMIAL</ff:description>
			<ff:regex>evaluatePolynomial</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>GF()</ff:type>
					<ff:type>Polynomial</ff:type>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>x</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>gcd</ff:name>
			<ff:description>DESC_FUNC_GCD</ff:description>
			<ff:regex>gcd</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>b</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer[]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>gcd</ff:name>
			<ff:description>DESC_FUNC_GCDRS</ff:description>
			<ff:regex>gcd</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>g</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Z()[x][]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>lcm</ff:name>
			<ff:description>DESC_FUNC_LCM</ff:description>
			<ff:regex>lcm</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>b</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>eea</ff:name>
			<ff:description>DESC_FUNC_EEA</ff:description>
			<ff:regex>eea</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>b</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer[]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>eea</ff:name>
			<ff:description>DESC_FUNC_EEARS</ff:description>
			<ff:regex>eea</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>g</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Z()[x][]</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>isPrime</ff:name>
			<ff:description>DESC_FUNC_ISPRIME</ff:description>
			<ff:regex>isPrime</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Integer</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>isIrreducible</ff:name>
			<ff:description>DESC_FUNC_ISIRREDUCIBLERS</ff:description>
			<ff:regex>isIrreducible</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>isIrreducible</ff:name>
			<ff:description>DESC_FUNC_ISIRREDUCIBLE</ff:description>
			<ff:regex>isIrreducible</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>p</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>isPrimitive</ff:name>
			<ff:description>DESC_FUNC_ISPRIMITIVE</ff:description>
			<ff:regex>isPrimitive</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>ply</ff:name>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>p</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>primeFactors</ff:name>
					<ff:type>Prime[]</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
</ff:function>
		
		<ff:function>
			<ff:name>isPrimitive</ff:name>
			<ff:description>DESC_FUNC_ISPRIMITIVERS</ff:description>
			<ff:regex>isPrimitive</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>isPrimitive</ff:name>
			<ff:description>DESC_FUNC_ISPRIMITIVEPOLY</ff:description>
			<ff:regex>isPrimitive</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>p</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Boolean</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>getIrreduciblePolynomial</ff:name>
			<ff:description>DESC_FUNC_GETIRREDUCIBLEPOLYNOMIAL</ff:description>
			<ff:regex>isPrimitive</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>GF()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>getCharacteristic</ff:name>
			<ff:description>DESC_FUNC_GETCHARACTERISTIC</ff:description>
			<ff:regex>getCharacteristic</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF()</ff:type>
					<ff:type>Z()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>ply</ff:name>
			<ff:description>DESC_FUNC_PLY</ff:description>
			<ff:regex>ply</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Polynomial</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>leadingCoefficient</ff:name>
			<ff:description>DESC_FUNC_LEADINGCOEFFICIENT</ff:description>
			<ff:regex>leadingCoefficient</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF()</ff:type>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>int</ff:name>
			<ff:description>DESC_FUNC_INT</ff:description>
			<ff:regex>int</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>a</ff:name>
					<ff:type>Z()</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>degree</ff:name>
			<ff:description>DESC_FUNC_DEGREE</ff:description>
			<ff:regex>degree</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF()</ff:type>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<ff:function>
			<ff:name>coefficientAt</ff:name>
			<ff:description>DESC_FUNC_COEFFICIENTAT</ff:description>
			<ff:regex>isPrimitive</ff:regex>
			<ff:parameterList>
				<ff:parameter>
					<ff:name>f</ff:name>
					<ff:type>Z()[x]</ff:type>
					<ff:type>GF()</ff:type>
					<ff:type>Polynomial</ff:type>
				</ff:parameter>
				<ff:parameter>
					<ff:name>i</ff:name>
					<ff:type>Integer</ff:type>
					<ff:type>Prime</ff:type>
				</ff:parameter>
			</ff:parameterList>
			<ff:returnType>Integer</ff:returnType>
		</ff:function>
		<!-- Added by Markus Wiltsche --> 
		<ff:function>
				<ff:name>str</ff:name>
					<ff:description>DESC_FUNC_TOSTRING</ff:description>
					<ff:regex>str</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>t1</ff:name>
							<ff:type>Integer</ff:type>
							<ff:type>Prime</ff:type>
							<ff:type>Z()[x]</ff:type>
							<ff:type>GF()</ff:type>
							<ff:type>Z()</ff:type>
							<ff:type>Polynomial</ff:type>
							<ff:type>String</ff:type>
							<ff:type>PseudoRandomGenerator</ff:type>
							<ff:type>RandomGenerator</ff:type>
							<ff:type>EllipticCurve</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>String</ff:returnType>
			</ff:function>
			<ff:function>
				<ff:name>hash</ff:name>
					<ff:description>DESC_FUNC_HASH</ff:description>
					<ff:regex>hash</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>t1</ff:name>
							<ff:type>Integer</ff:type>
							<ff:type>Prime</ff:type>
							<ff:type>Z()[x]</ff:type>
							<ff:type>GF()</ff:type>
							<ff:type>Z()</ff:type>
							<ff:type>Polynomial</ff:type>
							<ff:type>String</ff:type>
							<ff:type>EllipticCurve</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
                        <ff:function>
				<ff:name>readInt</ff:name>
					<ff:description>DESC_FUNC_READ</ff:description>
					<ff:regex>readInt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>prompt</ff:name>
							<ff:type>String</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
                        <ff:function>
				<ff:name>readStr</ff:name>
					<ff:description>DESC_FUNC_READ</ff:description>
					<ff:regex>readStr</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>prompt</ff:name>
							<ff:type>String</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>String</ff:returnType>
			</ff:function>
                        <ff:function>
				<ff:name>sqrt</ff:name>
					<ff:description>DESC_FUNC_SQRT_Z</ff:description>
					<ff:regex>sqrt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>a</ff:name>
							<ff:type>Z()</ff:type>
              <ff:type>GF</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Z() | GF</ff:returnType>
			</ff:function>
                        <ff:function>
				<ff:name>readBool</ff:name>
					<ff:description>DESC_FUNC_READ</ff:description>
					<ff:regex>readBool</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>prompt</ff:name>
							<ff:type>String</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Boolean</ff:returnType>
			</ff:function>
                        <ff:function>
				<ff:name>readPoly</ff:name>
					<ff:description>DESC_FUNC_READ</ff:description>
					<ff:regex>readPoly</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>prompt</ff:name>
							<ff:type>String</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Polynomial</ff:returnType>
			</ff:function>
     <ff:function>
				<ff:name>readEC</ff:name>
					<ff:description>DESC_FUNC_READ</ff:description>
					<ff:regex>readEC</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>prompt</ff:name>
							<ff:type>String</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>EllipticCurve</ff:returnType>
			</ff:function>
			<ff:function>
				<ff:name>TLPairing</ff:name>
					<ff:description>DESC_FUNC_TLP</ff:description>
					<ff:regex>TLPairing</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>A</ff:name>
							<ff:type>EC</ff:type>
						</ff:parameter>
						<ff:parameter>
							<ff:name>B</ff:name>
							<ff:type>EC</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>GF</ff:returnType>
			</ff:function>
      <ff:function>
				<ff:name>AESEncrypt</ff:name>
					<ff:description>DESC_FUNC_AESENCRYPT</ff:description>
					<ff:regex>AESEncrypt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>M</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
						<ff:parameter>
							<ff:name>K</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
            <ff:parameter>
							<ff:name>IV</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
      <ff:function>
				<ff:name>AESDecrypt</ff:name>
					<ff:description>DESC_FUNC_AESDECRYPT</ff:description>
					<ff:regex>AESEncrypt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>M</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
						<ff:parameter>
							<ff:name>K</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
            <ff:parameter>
							<ff:name>IV</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
      <ff:function>
				<ff:name>AESRawEncrypt</ff:name>
					<ff:description>DESC_FUNC_AESRAWENCRYPT</ff:description>
					<ff:regex>AESEncrypt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>M</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
						<ff:parameter>
							<ff:name>K</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
      <ff:function>
				<ff:name>AESRawDecrypt</ff:name>
					<ff:description>DESC_FUNC_AESRAWDECRYPT</ff:description>
					<ff:regex>AESEncrypt</ff:regex>
					<ff:parameterList>
						<ff:parameter>
							<ff:name>M</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
						<ff:parameter>
							<ff:name>K</ff:name>
							<ff:type>Integer</ff:type>
						</ff:parameter>
					</ff:parameterList>
					<ff:returnType>Integer</ff:returnType>
			</ff:function>
	</ff:functionList>
</ff:apiSpecification>
